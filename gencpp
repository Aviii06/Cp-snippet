#!/bin/bash

echo '#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace std;
using namespace __gnu_pbds; 
 
template <typename T>
using oset = tree<T, null_type, less<T>, rb_tree_tag, 
tree_order_statistics_node_update>;
template <typename T>
using omultiset = tree<T, null_type, less_equal<T>, rb_tree_tag, 
tree_order_statistics_node_update>;

#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define int long long
#define umap unordered_map
#define fr(i,a,b) for(int i=a;i<b;i++)
const long long mx=1e7+5;
const long long mxp=1e7+5;
const long long mod=1e9+7;
#define endl "\n"
#define deb(x) cout<z<x<<"\n";
#define debl(x) cout<<x<<" ";
#define spair(p) cout<<"("<<p.first<<","<<p.second<<")\n";
int gcdExtended(int a, int b, int* x, int* y)
{
    if (a == 0)
    {
        *x = 0, *y = 1;
        return b;
    }
 
    int x1, y1; // To store results of recursive call
    int gcd = gcdExtended(b % a, a, &x1, &y1);
    *x = y1 - (b / a) * x1;
    *y = x1;
 
    return gcd;
}
 
ll modInverse(ll a, ll m)
{
    int x, y;
    int g = gcdExtended(a, m, &x, &y);
    if (g != 1)
        return 0;
    else
    {
        // m is added to handle negative x
        ll res = (x % m + m) % m;
        return res;
    }
}
ll nCr(ll n, ll k) {
    double res = 1;
    for (int i = 1; i <= k; ++i)
        res = res * (n - k + i) / i;
    return (int)(res + 0.01);
}
ll nCr(int n, int r,int m){
    if(r>n){
        return 0;
    }
    if(r>n-r){
        r = n-r;
    }
    ll ans = 1;
    for(int i = 1; i<=r ; i++){
        ans *= (n-i+1);
        ans%= m;
        ans *= modInverse(i, m);
        ans %= m;       
    }
    return ans;
}
long long binpow(long long a, long long b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
}
long long binpow(long long a, long long b, long long m)
{
    a %= m;
    long long res = 1;
    while (b > 0)
    {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}
template<typename t>
auto sumdigits(t a)
{
   t sum=0;
   while(a)
   {
        sum+=a%10;
        a/=10;
   }
  return sum;
}
bool primeArray[mxp];
void prePrime()
{
    memset(primeArray, true, sizeof(primeArray));
    primeArray[0]=false;
    primeArray[1]=false;
    for (int p = 2; p * p <= mx; p++)
    {
        if (primeArray[p] == true)
        {
            for (int i = p * p; i <= mx; i += p)
                primeArray[i] = false;
        }
    }
}
template<typename u,typename t>
auto binarySearch(u a[],u x,t st,t end)
{
    while(st<=end)
    {
        t mid=st+(end-st)/2;
        if(a[mid] > x)
        {
            end=mid-1;
        }
        else if(a[mid] < x)
        {
            st=mid+1;
        }
        if(a[mid] == x)
        {
            return mid;
        }
    }
    return -1;
}
void solve()
{
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t;
    cin>>t;
    while(t--)
        solve();
}
//l+1<r' > $1
